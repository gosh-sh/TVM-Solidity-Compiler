#file: noinspection SpellCheckingInspection
name: Release

on:
  push:
    branches:
      - ci
    tags:
      - "gosh_[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_linux:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
        include:
          - target: x86_64-unknown-linux-gnu
            name: linux_x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - run: |
          sudo apt update
          sudo apt install -y build-essential libboost-all-dev

      - run: |
          RUSTFLAGS='-C target-feature=+crt-static -C opt-level=s' cargo build -r --target ${{ matrix.target }}
          ./target/${{ matrix.target }}/release/sold --version
          cd target/${{ matrix.target }}/release
          tar czvf sold_${{ github.ref_name }}_${{ matrix.name }}.tar.gz sold

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sold_${{ github.ref_name }}_${{ matrix.name }}
          path: target/${{ matrix.target }}/release/sold_${{ github.ref_name }}_${{ matrix.name }}.tar.gz

  build_mac:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        target:
          #          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          #          - target: x86_64-apple-darwin
          #            name: x86_64_apple_darwin
          #            image: macos-13
          - target: aarch64-apple-darwin
            name: aarch64_apple_darwin
            image: macos-15

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Boost 1.83
        run: |
          brew install awnion/tap/boost@1.83
          brew link --force --overwrite awnion/tap/boost@1.83

      - run: |
          RUSTFLAGS='-C opt-level=s' cargo build -r --target ${{ matrix.target }}
          ./target/${{ matrix.target }}/release/sold --version
          cd target/${{ matrix.target }}/release
          tar czvf sold_${{ github.ref_name }}_${{ matrix.name }}.tar.gz sold

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sold_${{ github.ref_name }}_${{ matrix.name }}
          path: target/${{ matrix.target }}/release/sold_${{ github.ref_name }}_${{ matrix.name }}.tar.gz

  test_compatibility:
    name: Test compatibility
    needs: [ build_linux ]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container:
          - debian:11
          - debian:12
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:24.04

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y tar gzip

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: sold_${{ github.ref_name }}_linux_x86_64
          path: ./artifacts

      - name: Test Linux artifact
        run: |
          cd ./artifacts
          tar xzvf sold_${{ github.ref_name }}_linux_x86_64.tar.gz
          ./sold --version

  release:
    name: Create Release
    needs: [ test_compatibility, build_linux, build_mac ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Set prerelease flag
        id: prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.ref_name }}" =~ ^gosh_[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "TITLE=Release ${GITHUB_REF_NAME#gosh_}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "TITLE=Pre-release ${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${GITHUB_REF_NAME}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Set tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ steps.prerelease.outputs.TAG_NAME }}
        run: |
          if [[ "$TAG_NAME" != "${{ github.ref_name }}" ]]; then
            git tag -f -m "$TAG_NAME" "$TAG_NAME"
            git push -f origin "$TAG_NAME"
          fi

      - name: "Create release/pre-release if doesn't exist"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TITLE: ${{ steps.prerelease.outputs.TITLE }}
          TAG_NAME: ${{ steps.prerelease.outputs.TAG_NAME }}
          PRERELEASE: ${{ steps.prerelease.outputs.PRERELEASE }}
        run: |
          EXISTS=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --silent && echo "true" || echo "false")
          if [[ "$EXISTS" = "false" ]]; then
            if [[ "$PRERELEASE" = "true" ]]; then
              gh release create "$TAG_NAME" --title "$TITLE"
            else
              gh release create "$TAG_NAME" --title "$TITLE" --prerelease
            fi
          fi

      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ steps.prerelease.outputs.TAG_NAME }}" \
            ./artifacts/sold_${{ github.ref_name }}_linux_x86_64/sold_${{ github.ref_name }}_linux_x86_64.tar.gz \
            ./artifacts/sold_${{ github.ref_name }}_aarch64_apple_darwin/sold_${{ github.ref_name }}_aarch64_apple_darwin.tar.gz \
            --clobber
